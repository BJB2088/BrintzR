# Simulating Data
# Royle's Model
x=rpois(50,3)
sum(x)
mat=matrix(rep(x,6),nrow=50,ncol=6)
n=matrix(rbinom(300,x,.5),nrow=50,ncol=6)
# Migration Model
x=rpois(50,3)
# Initial Matrix
mat=matrix(rep(x,6),nrow=50,ncol=6)
v=dim(mat)[2]
omega = .8
gamma = .2
# Survive and Gain
nmat=mat
for (i in 2:v){
  nmat[,i]=rbinom(50,mat[,i-1],omega) + rpois(50,gamma*mat[,i-1])
}
n=matrix(rbinom(300,as.vector(t(nmat)),.5),nrow=50,ncol=6,byrow=T)
#######
# Birds data
birds=read.csv("birds.csv",header=TRUE)
head(birds)
n.it=t(birds)[8:57,]
#######
# Initial Values
n.it=n
R=dim(n.it)[1]
S=dim(n.it)[2]
start=c(rep(as.vector(apply(n.it,1,max)),each=S),.8,1,.6,.3)
#####



posterior <- function(param){
  N = param[1:(R*S)]
  p = param[(R*S)+1]
  lam = param[(R*S)+2]
  omega = param[(R*S)+3]
  gamma=param[(R*S)+4]
  singlelikelihoods = dbinom(as.vector(t(n.it)), N, p,log=T)
  
  Npriort1=dpois(param[seq(1,R*S,by=6)],lam,log=T)
  NMAT=matrix(param[1:(R*S)],nrow=S,ncol=R)
  minN=matrix(rep(0,R*(S-1)),nrow=S-1,ncol=R)
  Npriort2T=matrix(rep(0,R*(S-1)),nrow=S-1,ncol=R)
  for(j in 1:R){
    for(i in 2:S){
      minN[(i-1),j]=min(NMAT[(i-1):i,j])
      vec=0:minN[i-1,j]
      Npriort2T[i-1,j]=log(sum(dbinom(vec,NMAT[(i-1),j],omega)*dpois(NMAT[i,j]-vec,gamma*NMAT[(i-1),j])))
    }}
  pprior=dunif(p,0,1,log=T)
  lamprior=dgamma(lam,shape=1,scale=100,log=T)
  omegaprior=dunif(omega,0,1,log=T)
  gammaprior= dgamma(gamma,shape=1,scale=100,log=T)
  sumll = sum(singlelikelihoods,Npriort1,Npriort2T,pprior,lamprior,omegaprior,gammaprior)
  return(sumll)
}


proposalfunction <- function(param){
  # Proposal N values for all sites and visits
  Nval=round(rnorm((R*S),param[1:(R*S)]))
  p1=apply(cbind(as.vector(t(n.it)),Nval),1,max)
  # Propose Other parametrs 
  pval=rnorm(1,param[R+1],.2)
  p2 = if(pval >=1){1} else if(pval<=0){0} else{pval}
  lval=rnorm(1,param[R+2],.05)
  p3=ifelse(lval<0,0,lval)
  oval=rnorm(1,param[R+3],.2)
  p4 = if(oval >=1){1} else if(oval<=0){0} else{oval}
  gval=rnorm(1,param[R+4],.05)
  p5=ifelse(gval<0,0,gval)
  #############
  return(c(p1,p2,p3,p4,p5))
}

run_MH <- function(startvalue,j){
  stop=0
  repeat{
    if(j %in% 1:R){
      proposal = proposalfunction(startvalue)[j:j+S-1]
      proptest = startvalue
      proptest[j:j+S-1] = proposal}
    
    else{
      proposal = proposalfunction(startvalue)[j]
      proptest = startvalue
      proptest[j] = proposal}
    probab = exp(posterior(proptest) - posterior(startvalue))
    stop=ifelse(runif(1) < probab,1,0)
    if (stop>0) break
  }
  return(proptest)
}
gibbs <- function(startvalue,iterations){
  chain = array(dim = c(iterations+1,(R*S)+4))
  chain[1,] = startvalue
  for(i in 2:iterations){
    print(i)
    chain[i,]=chain[i-1,]
    for(j in 1:R+4){ # i is # of Params
      if(j %in% 1:R){chain[i,j:j+S-1]=run_MH(chain[i,],j)[j:j+S-1]}
      else{chain[i,j]=run_MH(chain[i,],j)[j]}
    }
  }
  return(chain)
}
out=gibbs(start,10)
qplot(200:1000,out[200:1000,52],geom="line")
apply(out[100:200,],2,mean)
apply(out[500:1000,],2,quantile,c(.025,.975))
sum(apply(out[200:500,],2,mean)[1:50])
out[500:1000,1]
qplot(1:10000,dgamma(1:10000,shape=1,scale=100),geom="line") + geom_point(aes(x=2,y=dgamma(2,shape=1,scale=100)))
