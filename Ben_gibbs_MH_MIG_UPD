library(msm)
library(mc2d)
# Simulating Data
# Royle's Model
x=rpois(50,3)
sum(x)
mat=matrix(rep(x,6),nrow=50,ncol=6)
n=matrix(rbinom(300,x,.5),nrow=50,ncol=6)


# Migration Model
x=rpois(50,3)
# Initial Matrix
mat=matrix(rep(x,6),nrow=50,ncol=6)
v=dim(mat)[2]
omega = .95
gamma = 1
# Survive and Gain
nmat=mat
for (i in 2:v){
  nmat[,i]=rbinom(50,mat[,i-1],omega) + rpois(50,gamma) # potentially add rpois(50,gamma*mat[,i-1])
}
n=matrix(rbinom(300,as.vector(t(nmat)),.8),nrow=50,ncol=6,byrow=T)
#######
# Birds data
birds=read.csv("birds.csv",header=TRUE)
head(birds)
n.it=t(birds)[8:57,]
#######
# Initial Values
n.it=n
R=dim(n.it)[1]
S=dim(n.it)[2]
start=c(as.vector(t(n.it)),.5,1,.6,1)
fn=function(y){0:y}
llinit=rep(0,54)
for(j in 1:R){
  llinit[j]=match.fun(funcList2[[j]])(start[(((j-1)*S)+1):((((j-1)*S)+1)+S-1)],j,start)
}
for(j in (R+1):(R+4)){
  llinit[j]=match.fun(funcList2[[j]])(start[(j-R+(R*S))],j,start)
}
#####

funcList2=list()
for(y in 1:R){
  funcList2[[y]]="sites"
}
funcList2[[51]]= "prior_p"
funcList2[[52]]="prior_lam"
funcList2[[53]]="prior_omega"
funcList2[[54]]="prior_gamma"

sites <- function(param,j,startvalue){
  lls=dbinom(n.it[j,], param, startvalue[(R*S)+1],log=T)
  Npriort1=dpois(param[1],startvalue[R*S+2],log=T)
  NMAT2=rep(param,each=2)
  minl=apply(matrix(NMAT2[2:((S*2)-1)],ncol=2,nrow=(S-1),byrow=TRUE),1,min)
  dat=mapply(fn,minl,SIMPLIFY=FALSE)
  max.len <- max(sapply(dat, length))
  corrected.list <- lapply(dat, function(x) {c(x, rep(NA, max.len - length(x)))})
  mat <- do.call(rbind, corrected.list)
  Npriort2T=log(apply((dbinom(mat,param[1:(S-1)],startvalue[(R*S)+3])*dpois(param[2:S]-mat,startvalue[(R*S)+4])),1,sum,na.rm=T))
  return(sum(lls,Npriort1,Npriort2T))
}
prior_p <- function(param,j,startvalue){return(dunif(param,0,1,log=T))}
prior_lam <- function(param,j,startvalue){return(dgamma(param,shape=1,scale=100,log=T))}
prior_omega <- function(param,j,startvalue){return(dunif(param,0,1,log=T))}
prior_gamma <- function(param,j,startvalue){return(dgamma(param,shape=1,scale=100,log=T))}

posterior <- function(param,j,startvalue){
  match.fun(funcList2[[j]])(param,j,startvalue)
}

funcList=list()
for(y in 1:R){
  funcList[[y]]="prop_sites"
}
funcList[[51]]= "prop_p"
funcList[[52]]="prop_lam"
funcList[[53]]="prop_omega"
funcList[[54]]="prop_gamma"

prop_sites  <- function(param,j){return(round(rtnorm(n=S,param[(((j-1)*S)+1):((((j-1)*S)+1)+S-1)],sd=.5,lower=n.it[j,])))}
prop_p = function(param,j){return(rtnorm(1,param[((R*S)+1)],.01,lower=0,upper=1))}
prop_lam = function(param,j){return(rtnorm(1,param[((R*S)+2)],.1,lower=0))}
prop_omega = function(param,j){return(rtnorm(1,param[((R*S)+3)],.01,lower=0,upper=1))}
prop_gamma = function(param,j){return(rtnorm(1,param[((R*S)+4)],.1,lower=0))}

proposalfunction <- function(param,j){
  match.fun(funcList[[j]])(param,j)
}


run_MH <- function(startvalue,j,ll){
  stop=0
  repeat{
    proptest = proposalfunction(startvalue,j) 
    print(c(proptest,j))
    newll=ll
    newll[j]=posterior(proptest,j,startvalue)
    probab = exp(sum(newll) - sum(ll))
    print(c(sum(newll),sum(ll),sum(newll) - sum(ll)))
    stop=ifelse(runif(1) < probab,1,0)
    if (stop>0) break
  }
  return(list(proptest,newll))
}

gibbs <- function(startvalue,iterations){
  chain = array(dim = c(iterations+1,(R*S)+4))
  chain[1,] = startvalue
  currentll=llinit
  for(i in 2:iterations){
    chain[i,]=chain[i-1,]
    for(j in 1:(R+4)){ # i is # of Params
      if(j %in% 1:R){
        put=run_MH(chain[i,],j,currentll)
        chain[i,(((j-1)*S)+1):((((j-1)*S)+1)+S-1)]=put[[1]]
      }
      else{
        put=run_MH(chain[i,],j,currentll)
        chain[i,(j-R+(R*S))]=put[[1]]}
      currentll=put[[2]]
    }
  }
  return(chain)
}


out=gibbs(start,2)
qplot(100:500,out[100:500,304],geom="line")
apply(out[300:500,],2,mean)
apply(out[300:500,],2,quantile,c(.025,.975))
sum(apply(out[200:500,],2,mean)[1:50])
out[500:1000,1]

? match.fun
fun1=function(x,y){x+1+y}
match.fun(as.function(cat("fun",j,sep="")))(2)
match.fun(funcList[[1]])(2,1)

funcList <- list("fun1")


